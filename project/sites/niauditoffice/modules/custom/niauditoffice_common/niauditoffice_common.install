<?php
//
//use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
//use Drupal\Component\Plugin\Exception\PluginNotFoundException;
//use Drupal\Core\Entity\EntityStorageException;
//use Drupal\node\NodeInterface;
//
///**
// * Migrate Publication field_publication_topic > field_publication_type.
// * Copied and modified from https://atendesigngroup.com/articles/programmatically-copy-field-data-drupal-8.
// */
//function niauditoffice_common_update_9001(&$sandbox) {
//  niauditoffice_common_copy_field_values($sandbox, 'publication_page', 'field_publication_topic', 'field_publication_type');
//}
//
///**
// * Copies the value from one field to another empty field.
// *
// * @param array $sandbox
// * The batch operation sandbox.
// * @param string $bundle
// * The node bundle.
// * @param string $source_field
// * The source field name.
// * @param string $dest_field
// * The destination field.
// * @param int $nodes_per_batch
// * The amount of nodes to update at a given time.
// * @throws InvalidPluginDefinitionException
// * @throws PluginNotFoundException
// * @throws EntityStorageException
// */
//function niauditoffice_common_copy_field_values(array &$sandbox, string $bundle, string $source_field, string $dest_field, int $nodes_per_batch = 20): void
//{
//  $storage = \Drupal::entityTypeManager()->getStorage('node');
//  // Initialize some variables during the first pass through.
//  if (!isset($sandbox['total'])) {
//    $query = $storage->getQuery()
//      ->condition('type', $bundle)
//      ->notExists($dest_field)
//      ->exists($source_field)
//      ->accessCheck(FALSE);
//
//    $nids = $query->execute();
//
//    $sandbox['total'] = count($nids);
//    $sandbox['ids'] = array_chunk($nids, $nodes_per_batch);
//    $sandbox['current'] = 0;
//  }
//
//  if ($sandbox['total'] == 0) {
//    $sandbox['#finished'] = 1;
//    return;
//  }
//
//  $nids = array_shift($sandbox['ids']);
//  $nodes = $storage->loadMultiple($nids);
//
//  /* @var $node NodeInterface $node */
//  foreach ($nodes as $node) {
//    $node->$dest_field = $node->$source_field; // Programmatically copy field data
//    $node->save();
//    $sandbox['current']++;
//  }
//
//  $sandbox['#finished'] = min(($sandbox['current'] / $sandbox['total']), 1);
//}
//
