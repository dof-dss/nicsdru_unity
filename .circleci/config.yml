version: 2.1

# Re-usable commands.
commands:
  checkout_code:
    description: "Handle composer access tokens, SSH key fingerprints and code checkout"
    steps:
#      - run:
#          name: Add GitHub access token for composer
#          command: echo 'composer config -g github-oauth.github.com $GITHUB_TOKEN' >> $BASH_ENV
      # Add SSH user key so we can access related repositories as part of our initial clone + composer install command.
      # 63:d5 >> GitHub user key fingerprint
      - add_ssh_keys:
          fingerprints:
            - "63:d5:d9:74:c7:9c:80:83:9a:67:da:28:d2:a5:d3:e5"
      - checkout
  composer_tasks:
    description: "Validate and install dependencies using composer"
    steps:
      - run:
          name: Validate composer.json and composer.lock file for consistency
          command: composer validate --no-check-all --strict
      - restore_cache:
          keys:
            - composer-{{ checksum "composer.lock" }}
      - run:
          name: Fetch dependencies with composer
          command: |
            composer install --no-interaction --optimize-autoloader
      - save_cache:
          key: composer-{{ checksum "composer.lock" }}
          paths:
            - $HOME/.composer/cache
  composer_tasks__no_cache:
    description: "Validate and install dependencies using composer"
    steps:
      - run:
          name: Validate composer.json and composer.lock file for consistency
          command: composer validate --no-check-all --strict
      - run:
          name: Fetch dependencies with composer
          command: |
            composer install --no-interaction --optimize-autoloader

  install_php_os_extensions:
    description: "Install a standard group of extensions and packages"
    steps:
      - run:
          name: Add OS and PHP extensions
          command: |
            sudo cp /home/circleci/project/.circleci/docker-php-circleci.ini /usr/local/etc/php/conf.d/
            sudo apt-get update
            sudo apt-get install -y libpng-dev
            sudo docker-php-ext-install gd
  github_hosts_workaround:
    description: "Adds github.com to known hosts in container; for working locally."
    steps:
      - run:
          name: Keyscan for github.com
          command: mkdir -p ~/.ssh && ssh-keyscan -H github.com >> ~/.ssh/known_hosts
jobs:
  # Tests the integrity of the build, stores the results in a workspace for re-use in later jobs.
  build:
    docker:
      - image: circleci/php:7.4.15-apache-browsers
    steps:
      - checkout_code
      - install_php_os_extensions
      - composer_tasks
      - persist_to_workspace:
          root: ./
          paths:
            - ./

  # Test for coding standards.
  coding_standards:
    docker:
      - image: circleci/php:7.4.15-apache-browsers
    steps:
      - attach_workspace:
          at: ./
      - run: sudo cp /home/circleci/project/.circleci/docker-php-circleci.ini /usr/local/etc/php/conf.d/
      - run:
          name: PHPCS analysis
          command: /home/circleci/project/phpcs.sh /home/circleci/project "/home/circleci/project/web/sites /home/circleci/project/web/modules/origins /home/circleci/project/web/modules/custom /home/circleci/project/web/themes/custom /home/circleci/project/web/profiles/unity /home/circleci/project/web/profiles/origins"

  # Test for coding standards and deprecated code.
  deprecated_code:
    docker:
      - image: circleci/php:7.4.15-apache-browsers
    steps:
      - attach_workspace:
          at: ./
      - run: sudo cp /home/circleci/project/.circleci/docker-php-circleci.ini /usr/local/etc/php/conf.d/
      - run:
          name: Deprecated code check
          command: |
            cd /home/circleci/project
            vendor/bin/drupal-check /home/circleci/project/web/modules/custom /home/circleci/project/web/modules/origins

  # Run any unit tests and any kernel tests against a vanilla D8 site + our site config imported over it (no predefined content).
  unit_kernel_tests:
    docker:
      - image: circleci/php:7.4.15-apache-browsers
      - image: circleci/mysql:5.7.27
        environment:
          - CONFIG_SYNC_DIRECTORY: "../config/uregni/config"
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Add extra OS and PHP extensions/config
          command: |
            sudo cp /home/circleci/project/.circleci/docker-php-circleci.ini /usr/local/etc/php/conf.d/
            sudo apt-get --allow-releaseinfo-change update
            sudo apt-get install -y libpng-dev mariadb-client rsync
            sudo docker-php-ext-install gd pdo_mysql
      - run:
          name: Copy vhost into place
          command: |
            sudo cp .circleci/drupal.vhost /etc/apache2/sites-available/drupal.conf
      - run:
          name: Enable web server and vhosts
          command: |
            sudo a2enmod rewrite
            sudo a2dissite 000-default
            sudo a2ensite drupal
            sudo service apache2 start
      - run:
          name: Install Drupal and configure settings
          command: |
            # Should be scaffolded by now.
            cd /home/circleci/project/web
            cp sites/default/default.services.yml sites/default/services.yml
            # Copy PHPUnit config into core folder.
            cp /home/circleci/project/.circleci/phpunit.circleci.xml core/
            # Site install for each multi site (un-comment as necessary).
            # for site in uregni liofa fictcommission
            for site in uregni
            do
              # Copy in our environment specific settings to the selected multi site settings.php file.
              cd /home/circleci/project/web
              cp /home/circleci/project/.circleci/drupal.settings.php sites/$site/settings.local.php
              # >> Workaround to install from config; can't yet due to issue in Drupal core.
              sed -i -e "s/origins:/minimal:/g" ../config/$site/config/core.extension.yml
              sed -i -e "s/profile: origins/profile: minimal/g" ../config/$site/config/core.extension.yml
              # Install Drupal (or restore from DB dump at this point).
              mysql -h 127.0.0.1 -u root -e "create schema $site"
              cd sites/$site
              ../../../vendor/bin/drush site-install -y --existing-config
            done

      - run:
          name: Copy files into webroot
          command: |
            # Copy our build into position (./ suffix ensures hidden files are copied too).
            sudo rsync -avq /home/circleci/project/. /var/www/html
      - run:
          name: PHPUnit tests (unit)
          command: |
            cd /var/www/html/web/core
            ../../vendor/bin/phpunit -c /var/www/html/web/core/phpunit.circleci.xml --testsuite unit --group unity
      - run:
          name: PHPUnit tests (kernel)
          command: |
            cd /var/www/html/web/core
            ../../vendor/bin/phpunit -c /var/www/html/web/core/phpunit.circleci.xml --testsuite kernel --group unity


  # Deploy task.
  deploy:
    docker:
      - image: circleci/php:7.3.14-apache-node-browsers
    steps:
      - checkout_code
      - run:
          name: Add platform.sh hosts to SSH known hosts
          command: mkdir -p ~/.ssh && ssh-keyscan -H git.uk-1.platform.sh >> ~/.ssh/known_hosts
      - run:
          name: Relay to platform.sh
          command: |
            # Code is checked out under /home/circleci/project
            cd /home/circleci/project
            git remote add platform ${PLATFORM_REPO_URL}
            git push -f platform ${CIRCLE_BRANCH}

  # Nightly config install test.
  config_install:
    docker:
      - image: circleci/php:7.4.15-apache-browsers
      - image: circleci/mysql:5.7.27
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Add extra OS and PHP extensions/config
          command: |
            sudo cp /home/circleci/project/.circleci/docker-php-circleci.ini /usr/local/etc/php/conf.d/
            sudo apt-get --allow-releaseinfo-change update
            sudo apt-get install -y libpng-dev mariadb-client rsync
            sudo docker-php-ext-install gd pdo_mysql
      - run:
          name: Copy vhost into place
          command: |
            sudo cp .circleci/drupal.vhost /etc/apache2/sites-available/drupal.conf
      - run:
          name: Enable web server and vhosts
          command: |
            sudo a2enmod rewrite
            sudo a2dissite 000-default
            sudo a2ensite drupal
            sudo service apache2 start
      - run:
          name: Install Drupal and configure settings
          command: |
            # Should be scaffolded by now.
            cd /home/circleci/project/web
            cp sites/default/default.services.yml sites/default/services.yml
            # Copy PHPUnit config into core folder.
            cp /home/circleci/project/.circleci/phpunit.circleci.xml core/
            # Site install for each multi site (un-comment as necessary).
            # for site in uregni liofa fictcommission
            for site in uregni
            do
              # Copy in our environment specific settings to the selected multi site settings.php file.
              cd /home/circleci/project/web
              cp /home/circleci/project/.circleci/drupal.settings.php sites/$site/settings.local.php
              # >> Workaround to install from config; can't yet due to issue in Drupal core.
              sed -i -e "s/origins:/minimal:/g" ../config/$site/config/core.extension.yml
              sed -i -e "s/profile: origins/profile: minimal/g" ../config/$site/config/core.extension.yml
              # Install Drupal (or restore from DB dump at this point).
              mysql -h 127.0.0.1 -u root -e "create schema $site"
              cd sites/$site
              ../../../vendor/bin/drush site-install -y --existing-config
            done
      - run:
          name: Test for successful bootstraps on all Drupal sites
          command: |
            cd /home/circleci/project/web
            # for site in uregni liofa fictcommission
            for site in uregni
            do
              ../vendor/bin/drush -l $site st | grep "Drupal bootstrap : Successful"
            done
  # Nightly edge build
  unity_edge_build:
    docker:
      - image: circleci/php:7.4.15-apache-browsers
    environment:
      # git variables to avoid empty committer identity errors
      EMAIL: "circleci@localhost"
      GIT_COMMITTER_NAME: "Circle CI"
      GIT_AUTHOR_NAME: "Circle CI"
    steps:
      - attach_workspace:
          at: ./
      - install_php_os_extensions
      - run:
          name: Add extra OS and PHP extensions/config
          command: |
            sudo docker-php-ext-install pcntl posix
      - run:
          name: Keyscan Platform.sh region hostnames + GitHub for password-less access
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan -H ssh.$PLATFORM_REGION >> ~/.ssh/known_hosts
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts
      - run:
          name: Install the Platform.sh CLI tool
          command: |
            curl -sS https://platform.sh/cli/installer | php
      - run:
          name: Re-point dof-dss packages to use latest development code and push.
          command: |
            cd ~/project
            git checkout -b $EDGE_BUILD_BRANCH

            composer require dof-dss/nicsdru_unity_theme:dev-development dof-dss/nicsdru_origins_modules:dev-development \
              dof-dss/nicsdru_origins_profile:dev-development

            git add composer.*
            git commit -m "Set dof-dss packages to HEAD development for build"

            # Need to re-build Uregni theme with any Unity changes.
            cd web/sites/uregni/themes/uregni_theme
            sed -i -e "s/\"nicsdru_unity_theme.*/\"nicsdru_unity_theme\": \"github:dof-dss\/nicsdru_unity_theme#development\",/" package.json

            # Download and configure node and npm.
            curl -sL https://deb.nodesource.com/setup_12.x | sudo bash -
            sudo apt install nodejs
            #sudo apt install npm
            sudo apt install automake
            sudo apt install libjpeg-dev

            # Build Uregni theme.
            npm install
            npm rebuild node-sass
            npm run build

            git add *.css
            git commit -m "Uregni theme rebuild"

            # Push to fixed, non-integrating build branch. GitHub webhook integration will propagate this
            # to platform.sh for later steps to use.
            git push -f origin $EDGE_BUILD_BRANCH

            # Pause for webhook to propagate the change from GH to PSH.
            sleep 10s
      - run:
          name: Activate the environment if not found.
          command: |
            if ! /home/circleci/.platformsh/bin/platform environment:list -p $PLATFORM_PROJECT_ID -I --no-header --pipe | grep -q $EDGE_BUILD_BRANCH; then
              echo "No active environment for $EDGE_BUILD_BRANCH found, attempt to activate one."
              /home/circleci/.platformsh/bin/platform environment:activate -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH -y
            fi

  # Nightly edge build deployment
  unity_edge_build_deploy:
    docker:
      - image: circleci/php:7.4.15-apache-browsers
    steps:
      - checkout_code
      - install_php_os_extensions
      - run:
          name: Switch to edge build branch
          command: |
            cd ~/project
            git checkout -b $EDGE_BUILD_BRANCH
      - run:
          name: Install dev versions of dof-dss packages with composer.
          command: |
            composer require dof-dss/nicsdru_unity_theme:dev-development dof-dss/nicsdru_origins_modules:dev-development \
                         dof-dss/nicsdru_origins_profile:dev-development
      - persist_to_workspace:
          root: ./
          paths:
            - ./

  # Separate task to allow us to sync data on PSH environments, without pauses in other jobs.
  sync_data:
    docker:
      - image: circleci/php:7.4.15-apache-browsers
    steps:
      - checkout_code
      - run:
          name: Checkout edge branch
          command: |
            cd ~/project
            git checkout -b $EDGE_BUILD_BRANCH
      - install_php_os_extensions
      - run:
          name: Add extra OS and PHP extensions/config
          command: |
            sudo docker-php-ext-install pcntl posix
      - run:
          name: Keyscan Platform.sh region hostnames for password-less access
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan -H ssh.$PLATFORM_REGION >> ~/.ssh/known_hosts
      - run:
          name: Install the Platform.sh CLI tool
          command: |
            curl -sS https://platform.sh/cli/installer | php
      - run:
          name: Trigger a data sync from master environment to nightly edge build.
          command: |
            /home/circleci/.platformsh/bin/platform sync data -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH -y
      - run:
          name: Backup data sync if the previous attempt failed.
          command: |
            # Pause for the blocking activity to finish.
            sleep 90s
            /home/circleci/.platformsh/bin/platform sync data -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH -y
          when: on_fail
      - run:
          name: Turn off fastly module to allow for cleaner config import
          command: |
            /home/circleci/.platformsh/bin/platform drush 'pmu fastly -l uregni'  -y -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform drush 'pmu fastly -l odscni'  -y -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform drush 'pmu fastly -l hatecrimereviewni'  -y -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform drush 'pmu fastly -l liofa'  -y -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform drush 'pmu fastly -l fictcommission'  -y -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform drush 'pmu fastly -l employmenttribunalsni'  -y -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform drush 'pmu fastly -l attorneygeneralni'  -y -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform drush 'pmu fastly -l niauditoffice'  -y -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
      - run:
          name: Clear cache before config import
          command: |
            /home/circleci/.platformsh/bin/platform drush 'cr -l uregni'  -y -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform drush 'cr -l odscni'  -y -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform drush 'cr -l hatecrimereviewni'  -y -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform drush 'cr -l liofa'  -y -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform drush 'cr -l fictcommission'  -y -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform drush 'cr -l employmenttribunalsni'  -y -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform drush 'cr -l attorneygeneralni'  -y -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform drush 'cr -l niauditoffice'  -y -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
      - run:
          name: Refresh configuration as our db will contain active prod config after sync operation
          command: |
            /home/circleci/.platformsh/bin/platform drush 'cim -l uregni' -y -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform drush 'cim -l odscni'  -y -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform drush 'cim -l hatecrimereviewni'  -y -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform drush 'cim -l liofa'  -y -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform drush 'cim -l fictcommission'  -y -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform drush 'cim -l employmenttribunalsni'  -y -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform drush 'cim -l attorneygeneralni'  -y -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform drush 'cim -l niauditoffice'  -y -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
      - run:
          name: Force purge of Solr index
          command: /home/circleci/.platformsh/bin/platform ssh -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH "curl http://${PLATFORM_SOLR_HOST_UREGNI}/solr/uregni_index/update --data '<delete><query>*:*</query></delete>' -H 'Content-type:text/xml; charset=utf-8' && curl http://${PLATFORM_SOLR_HOST_UREGNI}/solr/uregni_index/update --data '<commit/>' -H 'Content-type:text/xml; charset=utf-8'"
      - run:
          name: Rebuild the Solr index
          command: |
            /home/circleci/.platformsh/bin/platform drush 'sapi-rt -l uregni' -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform drush 'sapi-c -l uregni' -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform drush 'sapi-r -l uregni' -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform drush 'sapi-i -l uregni' -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH

  # Rebuild solr on each deployment.
  deploy_solr_rebuild:
    docker:
      - image: circleci/php:7.4.15-apache-browsers
    steps:
      - attach_workspace:
          at: ./
      - install_php_os_extensions
      - run:
          name: Add extra OS and PHP extensions/config
          command: |
            sudo docker-php-ext-install pcntl posix
      - run:
          name: Keyscan Platform.sh region hostnames for password-less access
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan -H ssh.$PLATFORM_REGION >> ~/.ssh/known_hosts
      - run:
          name: Install the Platform.sh CLI tool
          command: |
            curl -sS https://platform.sh/cli/installer | php
      - run:
          name: Force purge of Solr index
          command: /home/circleci/.platformsh/bin/platform ssh -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH "curl http://${PLATFORM_SOLR_HOST_UREGNI}/solr/uregni_index/update --data '<delete><query>*:*</query></delete>' -H 'Content-type:text/xml; charset=utf-8' && curl http://${PLATFORM_SOLR_HOST_UREGNI}/solr/uregni_index/update --data '<commit/>' -H 'Content-type:text/xml; charset=utf-8'"
      - run:
          name: Rebuild the Solr index
          command: |
            /home/circleci/.platformsh/bin/platform drush 'sapi-rt -l uregni' -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform drush 'sapi-c -l uregni' -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform drush 'sapi-r -l uregni' -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH
            /home/circleci/.platformsh/bin/platform drush 'sapi-i -l uregni' -p $PLATFORM_PROJECT_ID -e $EDGE_BUILD_BRANCH

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build
      - coding_standards:
          requires:
            - build
      - deprecated_code:
          requires:
            - build
      - unit_kernel_tests:
          requires:
            - build
      - deploy_solr_rebuild:
          requires:
            - build
#      - deploy:
#          requires:
#            - static_analysis
#            - unit_kernel_tests
  nightly:
    triggers:
      - schedule:
          # At 00:00 on every day-of-week from Monday through Friday
          cron: "0 0 * * 1-5"
          filters:
            branches:
              only:
                - development
    jobs:
      - build
      - config_install:
          requires:
            - build

  # A nightly build of the project, using all dof-dss packages at HEAD from development branch.
  nightly-edge-build:
    triggers:
      - schedule:
          # At 00:30 Monday to Friday
          cron: "30 0 * * 1-5"
          filters:
            branches:
              only:
                - development
    jobs:
      - build
      - unity_edge_build:
          requires:
            - build

  # A nightly deploy or re-deploy of the edge site after the git branch has been created in nightly-edge-build.
  nightly-edge-build-deploy:
    triggers:
      - schedule:
          # At 01:23 Monday to Friday
          cron: "23 1 * * 1-5"
          filters:
            branches:
              only:
                - development
    jobs:
      - build
      - unity_edge_build_deploy:
          requires:
            - build
      - sync_data:
          requires:
            - unity_edge_build_deploy

