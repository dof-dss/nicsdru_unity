version: 2.1

# Re-usable commands.
commands:
  checkout_code:
    description: "Handle composer access tokens, SSH key fingerprints and code checkout"
    steps:
#      - run:
#          name: Add GitHub access token for composer
#          command: echo 'composer config -g github-oauth.github.com $GITHUB_TOKEN' >> $BASH_ENV
      # Add SSH user key so we can access related repositories as part of our initial clone + composer install command.
      # 63:d5 >> GitHub user key fingerprint
      - add_ssh_keys:
          fingerprints:
            - "63:d5:d9:74:c7:9c:80:83:9a:67:da:28:d2:a5:d3:e5"
      - checkout
  composer_tasks:
    description: "Validate and install dependencies using composer"
    steps:
      - run:
          name: Validate composer.json and composer.lock file for consistency
          command: composer validate --no-check-all --strict
      - restore_cache:
          keys:
            - composer-{{ checksum "composer.lock" }}
      - run:
          name: Fetch dependencies with composer
          command: |
            composer install --no-interaction --optimize-autoloader
      - save_cache:
          key: composer-{{ checksum "composer.lock" }}
          paths:
            - $HOME/.composer/cache
  composer_tasks__no_cache:
    description: "Validate and install dependencies using composer"
    steps:
      - run:
          name: Validate composer.json and composer.lock file for consistency
          command: composer validate --no-check-all --strict
      - run:
          name: Fetch dependencies with composer
          command: |
            composer install --no-interaction --optimize-autoloader

  install_php_os_extensions:
    description: "Install a standard group of extensions and packages"
    steps:
      - run:
          name: Add OS and PHP extensions
          command: |
            sudo cp /home/circleci/project/.circleci/docker-php-circleci.ini /usr/local/etc/php/conf.d/
            sudo apt-get update
            sudo apt-get install -y libpng-dev
            sudo docker-php-ext-install gd
            composer global require hirak/prestissimo
  github_hosts_workaround:
    description: "Adds github.com to known hosts in container; for working locally."
    steps:
      - run:
          name: Keyscan for github.com
          command: mkdir -p ~/.ssh && ssh-keyscan -H github.com >> ~/.ssh/known_hosts
jobs:
  # Tests the integrity of the build, stores the results in a workspace for re-use in later jobs.
  build:
    docker:
      - image: circleci/php:7.3.14-apache-browsers
    steps:
      - checkout_code
      - install_php_os_extensions
      - composer_tasks
      - persist_to_workspace:
          root: ./
          paths:
            - ./
  # Test for coding standards and deprecated code.
  static_analysis:
    docker:
      - image: circleci/php:7.3.14-apache-browsers
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: PHPCS static analysis
          command: /home/circleci/project/phpcs.sh /home/circleci/project "/home/circleci/project/web/sites /home/circleci/project/web/modules/origins /home/circleci/project/web/modules/custom /home/circleci/project/web/themes/custom /home/circleci/project/web/profiles/custom"
      - run:
          name: Deprecated code check
          command: |
            cd /home/circleci/project
            vendor/bin/drupal-check /home/circleci/project/web/modules/custom /home/circleci/project/web/modules/origins

  # Run any unit tests and any kernel tests against a vanilla D8 site + our site config imported over it (no predefined content).
  unit_kernel_tests:
    docker:
      - image: circleci/php:7.3.14-apache-browsers
      - image: circleci/mysql:5.7.27
        environment:
          - CONFIG_SYNC_DIRECTORY: "../config/uregni/config"
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Add extra OS and PHP extensions/config
          command: |
            sudo cp /home/circleci/project/.circleci/docker-php-circleci.ini /usr/local/etc/php/conf.d/
            sudo apt-get install -y libpng-dev mariadb-client rsync
            sudo docker-php-ext-install gd pdo_mysql
      - run:
          name: Copy vhost into place
          command: |
            sudo cp .circleci/drupal.vhost /etc/apache2/sites-available/drupal.conf
      - run:
          name: Enable web server and vhosts
          command: |
            sudo a2enmod rewrite
            sudo a2dissite 000-default
            sudo a2ensite drupal
            sudo service apache2 start
      - run:
          name: Install Drupal and configure settings
          command: |
            # Should be scaffolded by now.
            cd /home/circleci/project/web
            cp sites/default/default.services.yml sites/default/services.yml
            # Copy PHPUnit config into core folder.
            cp /home/circleci/project/.circleci/phpunit.circleci.xml core/
            # Copy in our environment specific settings to the Uregni settings.php file.
            cp /home/circleci/project/.circleci/drupal.settings.uregni.php sites/uregni/settings.local.php
            # >> Workaround to install from config; can't yet due to issue in Drupal core.
            # >> Drupal multisite: we'll use uregni config as representative for the codebase as we don't have
            # >> a generic/all-purpose config set to install from.
            sed -i -e "s/origins:/minimal:/g" ../config/uregni/config/core.extension.yml
            sed -i -e "s/profile: origins/profile: minimal/g" ../config/uregni/config/core.extension.yml
            # Install Drupal (or restore from DB dump at this point).
            mysql -h 127.0.0.1 -u root -e 'create schema uregni'
            cd sites/uregni
            ../../../vendor/bin/drush site-install -y --existing-config
      - run:
          name: Copy files into webroot
          command: |
            # Copy our build into position (./ suffix ensures hidden files are copied too).
            sudo rsync -avq /home/circleci/project/. /var/www/html
      - run:
          name: PHPUnit tests (unit)
          command: |
            cd /var/www/html/web/core
            ../../vendor/bin/phpunit -c /var/www/html/web/core/phpunit.circleci.xml --testsuite unit --group unity
      - run:
          name: PHPUnit tests (kernel)
          command: |
            cd /var/www/html/web/core
            ../../vendor/bin/phpunit -c /var/www/html/web/core/phpunit.circleci.xml --testsuite kernel --group unity


  # Deploy task.
  deploy:
    docker:
      - image: circleci/php:7.3.14-apache-node-browsers
    steps:
      - checkout_code
      - run:
          name: Add platform.sh hosts to SSH known hosts
          command: mkdir -p ~/.ssh && ssh-keyscan -H git.uk-1.platform.sh >> ~/.ssh/known_hosts
      - run:
          name: Relay to platform.sh
          command: |
            # Code is checked out under /home/circleci/project
            cd /home/circleci/project
            git remote add platform ${PLATFORM_REPO_URL}
            git push -f platform ${CIRCLE_BRANCH}

  # Nightly config install test.
  config_install:
    docker:
      - image: circleci/php:7.3.14-apache-browsers
      - image: circleci/mysql:5.7.27
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Add extra OS and PHP extensions/config
          command: |
            sudo cp /home/circleci/project/.circleci/docker-php-circleci.ini /usr/local/etc/php/conf.d/
            sudo apt-get install -y libpng-dev mariadb-client rsync
            sudo docker-php-ext-install gd pdo_mysql
      - run:
          name: Copy vhost into place
          command: |
            sudo cp .circleci/drupal.vhost /etc/apache2/sites-available/drupal.conf
      - run:
          name: Enable web server and vhosts
          command: |
            sudo a2enmod rewrite
            sudo a2dissite 000-default
            sudo a2ensite drupal
            sudo service apache2 start
      - run:
          name: Install Drupal and configure settings
          command: |
            # Should be scaffolded by now.
            cd /home/circleci/project/web
            cp sites/default/default.services.yml sites/default/services.yml
            # Copy in our environment specific settings to the Uregni settings.php file.
            cp /home/circleci/project/.circleci/drupal.settings.php sites/uregni/settings.local.php
            # Copy PHPUnit config into core folder.
            cp /home/circleci/project/.circleci/phpunit.circleci.xml core/
            # >> Workaround to install from config; can't yet due to issue in Drupal core.
            # >> Drupal multisite: we'll use uregni config as representative for the codebase as we don't have
            # >> a generic/all-purpose config set to install from.
            sed -i -e "s/origins:/minimal:/g" ../config/uregni/config/core.extension.yml
            sed -i -e "s/profile: origins/profile: minimal/g" ../config/uregni/config/core.extension.yml
            # Install Drupal (or restore from DB dump at this point).
            cd sites/uregni
            ../../../vendor/bin/drush site-install -y --existing-config
      - run:
          name: Test for HTTP 200 response code on Drupal
          command: |
            cd /home/circleci/project/web
            ../vendor/bin/drush cr
            # curl returns exit code 0 even for non-HTTP 200 so use grep to do the check based on response headers.
            curl -I http://localhost/user/login | grep "HTTP/2 200"


workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build
      - static_analysis:
          requires:
            - build
      - unit_kernel_tests:
          requires:
            - build
#      - deploy:
#          requires:
#            - static_analysis
#            - unit_kernel_tests
  nightly:
    triggers:
      - schedule:
          # At 00:00 on every day-of-week from Monday through Friday
          cron: "0 0 * * 1-5"
          filters:
            branches:
              only:
                - development
    jobs:
      - build
      - config_install:
          requires:
            - build
